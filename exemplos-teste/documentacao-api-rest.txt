DOCUMENTAÇÃO - API REST DO SISTEMA

Esta documentação descreve os endpoints disponíveis na API REST do sistema de RAG.

## Autenticação

Todos os endpoints (exceto /api/auth e /api/register) requerem autenticação via NextAuth.

### POST /api/register
Registra um novo usuário no sistema.

Request Body:
```json
{
  "email": "usuario@exemplo.com",
  "password": "senha123",
  "name": "Nome do Usuário"
}
```

Response (201):
```json
{
  "success": true,
  "message": "Usuário criado com sucesso"
}
```

### POST /api/auth/signin
Login via NextAuth (provider: credentials)

## Documentos

### GET /api/documents
Lista todos os documentos do usuário autenticado.

Response (200):
```json
{
  "documents": [
    {
      "id": "uuid",
      "userId": "uuid",
      "fileName": "documento.pdf",
      "fileType": "pdf",
      "fileSize": 1024000,
      "status": "completed",
      "createdAt": "2025-01-28T10:00:00Z",
      "updatedAt": "2025-01-28T10:00:00Z"
    }
  ]
}
```

### POST /api/documents/upload
Faz upload de um novo documento.

Request: multipart/form-data
- file: arquivo (PDF, TXT, DOCX, MD)
- max size: 20MB

Response (201):
```json
{
  "success": true,
  "data": {
    "id": "uuid-do-documento"
  }
}
```

### DELETE /api/documents/:id
Remove um documento e seus embeddings.

Response (200):
```json
{
  "success": true
}
```

## Conversas

### GET /api/conversations
Lista todas as conversas do usuário.

Response (200):
```json
{
  "conversations": [
    {
      "id": "uuid",
      "title": "Título da conversa",
      "userId": "uuid",
      "createdAt": "2025-01-28T10:00:00Z",
      "updatedAt": "2025-01-28T10:00:00Z"
    }
  ]
}
```

### POST /api/conversations
Cria uma nova conversa.

Request Body:
```json
{
  "title": "Nova conversa"
}
```

### GET /api/conversations/:id/messages
Lista todas as mensagens de uma conversa.

Response (200):
```json
{
  "messages": [
    {
      "id": "uuid",
      "conversationId": "uuid",
      "role": "user",
      "content": "Pergunta do usuário",
      "confidenceScore": null,
      "sources": null,
      "createdAt": "2025-01-28T10:00:00Z"
    },
    {
      "id": "uuid",
      "conversationId": "uuid",
      "role": "assistant",
      "content": "Resposta do assistente",
      "confidenceScore": 0.85,
      "sources": ["chunk-id-1", "chunk-id-2"],
      "createdAt": "2025-01-28T10:00:01Z"
    }
  ]
}
```

## Mensagens

### POST /api/messages
Envia uma mensagem e recebe resposta RAG.

Request Body:
```json
{
  "conversationId": "uuid",
  "content": "Qual é o problema do ticket 588594?",
  "documentId": "uuid-opcional",
  "similarityThreshold": 0.3
}
```

Response (200):
```json
{
  "success": true,
  "data": {
    "userMessage": { /* objeto Message */ },
    "assistantMessage": {
      "id": "uuid",
      "role": "assistant",
      "content": "O problema do ticket 588594...",
      "confidenceScore": 0.87,
      "sources": ["chunk-1", "chunk-2"]
    }
  }
}
```

## Rate Limits

- Usuários free: 50 mensagens por dia
- Não há rate limit para upload de documentos
- Tamanho máximo de arquivo: 20MB

## Códigos de Erro

- 400: Bad Request (validação falhou)
- 401: Unauthorized (não autenticado)
- 403: Forbidden (não autorizado para este recurso)
- 404: Not Found
- 429: Too Many Requests (rate limit excedido)
- 500: Internal Server Error

## Observações

- Todas as datas estão em formato ISO 8601 (UTC)
- IDs são UUIDs v4
- Respostas de erro seguem o padrão:
```json
{
  "success": false,
  "error": "Mensagem de erro descritiva"
}
```
