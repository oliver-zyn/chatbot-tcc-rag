GUIA DE CONFIGURAÇÃO - BANCO DE DADOS POSTGRESQL

Este documento descreve como configurar e otimizar o banco de dados PostgreSQL para o sistema de RAG.

## Requisitos

- PostgreSQL 14 ou superior
- Extensão pgvector instalada
- Mínimo 2GB RAM disponível
- Disco: mínimo 10GB (recomendado SSD)

## Instalação

### Linux (Ubuntu/Debian)
```bash
sudo apt update
sudo apt install postgresql postgresql-contrib
sudo -u postgres psql
```

### macOS
```bash
brew install postgresql@14
brew services start postgresql@14
```

### Docker
```bash
docker run -d \
  --name rag-postgres \
  -e POSTGRES_PASSWORD=senha123 \
  -e POSTGRES_DB=rag_database \
  -p 5432:5432 \
  -v pgdata:/var/lib/postgresql/data \
  ankane/pgvector
```

## Configuração da Extensão pgvector

Após instalar o PostgreSQL, instale a extensão pgvector:

```bash
# Clone o repositório
git clone https://github.com/pgvector/pgvector.git
cd pgvector

# Compile e instale
make
sudo make install

# No PostgreSQL
psql -U postgres -d rag_database
CREATE EXTENSION vector;
```

## Estrutura do Banco

### Tabelas Principais

**users**
- Armazena informações de usuários
- Autenticação via NextAuth
- Índice em email (unique)

**documents**
- Metadados dos documentos
- Relacionamento com users (cascade delete)
- Índice em userId e createdAt

**embeddings**
- Vetores de embeddings (1536 dimensões)
- Relacionamento com documents (cascade delete)
- Índice HNSW para busca de similaridade

**conversations**
- Histórico de conversas
- Relacionamento com users

**messages**
- Mensagens das conversas
- Armazena role, content, confidence score

**votes**
- Sistema de feedback (upvote/downvote)
- Relacionamento com messages

**usage**
- Controle de rate limiting
- Rastreamento de uso diário

## Otimizações Importantes

### 1. Connection Pooling
```typescript
// lib/db/index.ts
const client = postgres(env.DATABASE_URL, {
  max: 20,              // Máximo de conexões simultâneas
  idle_timeout: 20,     // Timeout de conexões ociosas (segundos)
  connect_timeout: 10,  // Timeout de conexão (segundos)
});
```

### 2. Índices HNSW para Embeddings
```sql
-- Índice para busca de similaridade por cosseno
CREATE INDEX ON embeddings
USING hnsw (embedding vector_cosine_ops)
WITH (m = 16, ef_construction = 64);
```

Parâmetros:
- m = 16: número de conexões por nó (padrão)
- ef_construction = 64: tamanho do candidato durante construção

Para mais precisão (mais lento):
- m = 32, ef_construction = 128

Para mais velocidade (menos preciso):
- m = 8, ef_construction = 32

### 3. Configurações do PostgreSQL

Edite postgresql.conf:

```conf
# Memória
shared_buffers = 256MB          # 25% da RAM disponível
effective_cache_size = 1GB      # 50-75% da RAM
work_mem = 16MB                 # Para ordenações e joins

# Connection Pool
max_connections = 100           # Ajuste conforme necessidade

# Logging (desenvolvimento)
log_statement = 'all'           # Remove em produção
log_duration = on

# Performance
random_page_cost = 1.1          # Para SSDs (padrão: 4.0)
effective_io_concurrency = 200  # Para SSDs
```

Reinicie o PostgreSQL:
```bash
sudo systemctl restart postgresql
```

### 4. Vacuum e Analyze

Configure autovacuum para manter performance:

```sql
-- Verificar configurações
SHOW autovacuum;

-- Forçar vacuum manualmente (se necessário)
VACUUM ANALYZE embeddings;
VACUUM ANALYZE documents;
```

## Backup e Restore

### Backup Completo
```bash
pg_dump -U postgres -d rag_database -F c -f backup.dump
```

### Backup Apenas Schema
```bash
pg_dump -U postgres -d rag_database --schema-only -f schema.sql
```

### Restore
```bash
pg_restore -U postgres -d rag_database -c backup.dump
```

## Monitoramento

### Verificar Conexões Ativas
```sql
SELECT count(*) FROM pg_stat_activity;
```

### Verificar Tamanho do Banco
```sql
SELECT pg_size_pretty(pg_database_size('rag_database'));
```

### Verificar Tamanho das Tabelas
```sql
SELECT
  tablename,
  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
```

### Queries Lentas
```sql
SELECT
  query,
  calls,
  total_time,
  mean_time
FROM pg_stat_statements
ORDER BY mean_time DESC
LIMIT 10;
```

## Troubleshooting

### Erro: "max clients reached"
Aumente max_connections ou reduza o pool:
```typescript
const client = postgres(url, { max: 1 });
```

### Busca de Similaridade Lenta
Verifique se o índice HNSW existe:
```sql
SELECT indexname FROM pg_indexes
WHERE tablename = 'embeddings';
```

Recrie o índice se necessário:
```sql
DROP INDEX IF EXISTS embeddings_embedding_idx;
CREATE INDEX embeddings_embedding_idx ON embeddings
USING hnsw (embedding vector_cosine_ops);
```

### Transações Longas Bloqueadas
```sql
SELECT * FROM pg_stat_activity
WHERE state = 'idle in transaction'
AND state_change < now() - interval '5 minutes';

-- Matar transação problema
SELECT pg_terminate_backend(pid);
```

## Ambiente de Produção

Recomendações adicionais:

1. Use serviços gerenciados (AWS RDS, Supabase, etc)
2. Configure SSL/TLS obrigatório
3. Implemente backup automático diário
4. Configure replicação para alta disponibilidade
5. Use read replicas para queries de leitura pesadas
6. Monitore com ferramentas (pgAdmin, DataDog, etc)

## Variáveis de Ambiente

```env
# .env.local
DATABASE_URL="postgresql://user:password@localhost:5432/rag_database"

# Com SSL (produção)
DATABASE_URL="postgresql://user:password@host:5432/db?sslmode=require"
```
